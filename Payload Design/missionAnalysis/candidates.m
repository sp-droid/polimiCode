% Mission analysis: creating a list of repeat candidate orbits% source: https://en.wikipedia.org/wiki/Satellite_ground_track% the topic of subcycles has been omittedclearclose allset(groot, 'defaultFigureUnits', 'pixels', 'defaultFigurePosition', [50 100 1000 500]);addpath(genpath('../shared'))%% ConstantsRearthAverage = 6371010E-3;Rearth = 6378137.0E-3;J2 = 0.0010826261738522227;         % EGM2008J4 = -1.6198975999169731E-6;        % EGM2008muEarth = astroConstants(13);Tearth = 86164.0905;%% Create candidate grid% Norbits[-], cycle[days], inclination[deg], altitude[km], exact repeat cycle[days], eccentricity[-]fprintf(strcat("--Search parameters--\n Cycle: 9-35 days\n Inclination: 65-115ยบ\n Height: 800-1400 km\n\n"))orbits = zeros((500-110+1)*(35-9+1)*(1150-650+1),6);count = 0;for j=110:500 % Norbits    j    for k=9:35 % Cycle        for i=65:0.1:115 % Inclination            count = count + 1;                        a0 = ((k*Tearth/2/pi/j)^2*muEarth)^(1/3);            a = fzero(@(a) exactRepeat(a, i, j, k, J2, J4, Rearth, muEarth, Tearth), a0);            h = a-Rearth;            if ((h<800) || (h>1400))                orbits(count,1) = NaN;                continue            end            p = a*(1-0.001^2);            e = 26.1913*sind(i)/2/p/1.75553; p = a*(1-e^2);            RoverPpower2 = (Rearth/p)^2; RoverPpower4 = RoverPpower2^2;            eFactor = sqrt(1-e^2);            Torb = 2*pi/meanMotion(a, i, J2, J4, muEarth, RoverPpower2, RoverPpower4, eFactor, e);            orbits(count,:) = [j,k,i,h,Torb*j/86400,e];        end    endendfprintf(strcat("--Results--\n Total number of candidates: ",string(count),"\n"))% Trim orbitsorbits(any(isnan(orbits), 2), :) = [];fprintf(strcat("Orbits within desired height: ",string(length(orbits)), " (",string(length(orbits)/count*100),")%%","\n"))orbits(1:3,:)%% Remove multiplesorbits = sortrows(orbits, [4, 1]);[~, uniqueIdx] = uniquetol(orbits(:,4));orbits = orbits(uniqueIdx, :);fprintf(strcat("Orbits without duplicates (multiples): ",string(length(orbits)), " (",string(length(orbits)/count*100),")%%","\n"))%% Savingsave("candidates.mat","orbits");%% PlottingC1 = [0 0.4470 0.7410];  % blueC2 = [0.8500 0.3250 0.0980];  % orange% Get solutions with inclination 97.4ยบselected = orbits(:,3)==97.4;figure;scatter(orbits(selected,4), orbits(selected,2), 18,'filled','MarkerFaceColor',C1)grid onxlabel('Altitude [km]')ylabel('Cycle [days]')fontsize(16,"points")title("97.4ยบ inclination")print(gcf, 'output/candidatesCycles.png', '-dpng', '-r200');figure;scatter(orbits(selected,4), orbits(selected,1), 18,'filled','MarkerFaceColor',C2)grid onxlabel('Altitude [km]')ylabel('No. orbits [-]')fontsize(16,"points")title("97.4ยบ inclination")print(gcf, 'output/candidatesNorbits.png', '-dpng', '-r200');function remainder = exactRepeat(a, i, j, k, J2, J4, Rearth, muEarth, Tearth)    p = a*(1-0.001^2);    e = 26.1913*sind(i)/2/p/1.75553; p = a*(1-e^2);    RoverPpower2 = (Rearth/p)^2; RoverPpower4 = RoverPpower2^2;    eFactor = sqrt(1-e^2);    n0 = sqrt(muEarth/a^3);    n = meanMotion(a, i, J2, J4, muEarth, RoverPpower2, RoverPpower4, eFactor, e);    remainder = abs(...                -4*pi^2/n/Tearth ...                                                                % Earth rotation term                -3*pi*J2*RoverPpower2*cosd(i) ...                                                                   % J2                +3*pi/16*J2^2*RoverPpower4*cosd(i)*(-36-4*e^2+48*eFactor+(40-5*e^2-72*eFactor)*sind(i)^2) ...       % J2^2                +n0/n*15*pi/16*J4*RoverPpower4*cosd(i)*(8+12*e^2-(14+21*e^2)*sind(i)^2) ) ...                            % J4                -2*pi*k/j;endfunction n = meanMotion(a, i, J2, J4, muEarth, RoverPpower2, RoverPpower4, eFactor, e)    n0 = sqrt(muEarth/a^3);    n = n0*(1+...        +3/4*J2*RoverPpower2*eFactor*(2-3*sind(i)^2) ...        +3/128*J2^2*RoverPpower4*eFactor*(120+64*eFactor-40*eFactor^2+(-240-192*eFactor+40*eFactor^2)*sind(i)^2+(105+144*eFactor+25*eFactor^2)*sind(i)^4) ...        -45/128*J4*RoverPpower4*eFactor*e^2*(-8+40*sind(i)^2-35*sind(i)^4));end